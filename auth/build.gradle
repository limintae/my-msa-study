plugins {
    id "org.springframework.boot" version "2.5.5"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "java"
}

group = "com.msa.example"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "11"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set("springCloudVersion", "2020.0.3")
    set("queryDslVersion", "4.4.0")
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    annotationProcessor (
            "org.springframework.boot:spring-boot-configuration-processor",
            "org.projectlombok:lombok:1.18.20",
            "javax.persistence:javax.persistence-api",
            "javax.annotation:javax.annotation-api",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
    )
    runtimeOnly (
            "com.h2database:h2",
            "mysql:mysql-connector-java:8.0.25",
            "io.jsonwebtoken:jjwt-impl:0.11.2",
            "io.jsonwebtoken:jjwt-jackson:0.11.2"
    )
    compileOnly (
            "io.jsonwebtoken:jjwt-api:0.11.2",
            "org.projectlombok:lombok:1.18.20"
    )
    testImplementation (
            "org.springframework.boot:spring-boot-starter-test",
            "org.springframework.security:spring-security-test"
    )
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// QueryDSL
sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}

test {
    doFirst {
        String activeProfile = System.properties['spring.profiles.active']
        systemProperty "spring.profiles.active", activeProfile
        println "@@active profile is " + activeProfile
    }
    useJUnitPlatform()
}
